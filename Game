import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;



public class Game extends JComponent implements KeyListener{
	protected Timer timer;
	protected Level level;
	protected int diffc=1;
	protected int score;
	protected int scoreTemp;
	protected int maxScoreInLevel;
	protected int keySpeed=15;
	protected List<NonStationaryObject> nsoList=new ArrayList<NonStationaryObject>();
	protected List<Obstacle> obList=new ArrayList<Obstacle>();
	public Game() {
		score=0;
		scoreTemp=0;
		maxScoreInLevel=0;
		this.addKeyListener(this);
		setFocusable(true);
		level=new Level(diffc);
		timer=new Timer(10,new TimerCallback());
		generateObstacle();
		level.ball.loadObstacle(obList);
		JOptionPane.showMessageDialog(null, "Welcome!\n Level 1");
		timer.start();
	}
	
	protected class TimerCallback implements ActionListener{
		@Override
	public void actionPerformed(ActionEvent arg0) {
			level.gameTimer.incrementTime();
			checkNSO(nsoList,level.ball.ballx+10,level.ball.bally+10);
			updateNSO(nsoList);
			if (level.gameTimer.timeElapsed>=level.gameTimer.length) {
				scoreTemp=score;
				diffc++;
				JOptionPane.showMessageDialog(null, "You win!\n Your score: "+score+"\nNext level: Level"+diffc);
				level=new Level(diffc);
				nsoList.clear();
				obList.clear();
				generateObstacle();
				level.ball.loadObstacle(obList);
				level.gameTimer=new GameTimer(1500);
			}
			AI(level.ball.ballx,level.paddle.paddlex,level.paddle.length);
			level.ball.nextMove();
			generateNSO(nsoList,100);
			if (level.ball.score) {
				score+=10*diffc;
				level.ball.score=false;
			}
			if (level.ball.loose()) {
				level.lives-=1;
				if(level.lives>0) {
				level.ball.reset();
				level.gameTimer=new GameTimer(1500);
				 if(score>maxScoreInLevel) {
					 maxScoreInLevel=score;
				 }
				score=scoreTemp;
				}
				else
				{if(maxScoreInLevel<score) {maxScoreInLevel=score;}
				JOptionPane.showMessageDialog(null, "You loose! \n Your score: "+maxScoreInLevel+"\n Back to Level 1");
				score=0;
				scoreTemp=0;
				maxScoreInLevel=0;
				diffc=1;
				level=new Level(diffc);
				nsoList.clear();
				generateObstacle();
				}
			}
			repaint();
	}}

public void paintComponent(Graphics g) {
	drawObstacle(g);
	drawNSOs(nsoList,g);
	g.setColor(Color.RED);
	g.fillOval(level.ball.getX(),800-level.ball.gety(), 20, 20);
	g.setColor(Color.BLACK);
	g.fillRect(level.paddle.getPaddleX(), 600, level.paddle.getLength(), 10);
	level.gameTimer.drawTimer(g);
	g.setColor(new Color(51,105,232));
	g.setFont(new Font(g.getFont().getFontName(), Font.PLAIN, 20) );
	g.drawString("Score: "+Integer.toString(score), 50, 40);
	g.setColor(new Color(238,178,17));
	g.drawString("Lives:"+Integer.toString(level.lives), 50, 70);

}

@Override
public void keyPressed(KeyEvent arg0) {
	keySpeed+=2;
	switch(arg0.getKeyCode()) {
	case 68://D
		if(level.paddle.getPaddleX()<800-level.paddle.length)
		{level.paddle.setPaddleX(keySpeed);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		else 
		{level.paddle.setAbsX(800-level.paddle.length);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		break;
	case 65://A
		if(level.paddle.getPaddleX()>0)
		{level.paddle.setPaddleX(-keySpeed);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		else
			{level.paddle.setAbsX(0);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		break;
	default:
		//Ignore
	}
	level.ball.setPaddleXInBall(level.paddle.getPaddleX());
}

public static void main (String[] args) {
	JFrame frame=new JFrame("Lob Pong");
	Game canvas=new Game();
	frame.add(canvas);
	frame.setSize(800, 800);
	frame.setResizable(false);
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.setVisible(true);
}

@Override
public void keyReleased(KeyEvent e) {
	keySpeed=15;
}

@Override
public void keyTyped(KeyEvent e) {
}

public void generateNSO(List<NonStationaryObject> x, int num) {
	int decision=(int)(Math.random()*num);
	switch(decision) {
	case 0:
		x.add(new MovingCloud((int)(Math.random()*600+100),(int)(Math.random()*500+400)));	
	break;
	default:
	
	}
}
public void drawNSOs(List<NonStationaryObject>x, Graphics y) {
	if(!x.isEmpty()) {
	for(NonStationaryObject z:x) {
		z.drawNSO(y);
	}}
}
public void checkNSO(List<NonStationaryObject> x, int a, int b) {
	if(!x.isEmpty()) {
	for(NonStationaryObject z:x) {
		if(z.hit(a, b)) {
			score+=z.bonous;
		}
	}}
}
public void updateNSO(List<NonStationaryObject>x) {
	if(!x.isEmpty()) {
	for(NonStationaryObject z:x) {
		z.move();
	}}
}

public void generateObstacle() {
	obList.add(new RectObstacle());
}

public void drawObstacle(Graphics x) {
	for(Obstacle z:obList) {
		z.drawObstacle(x);
	}
}

public void AI(int x,int p, int l) {
	if(level.ball.bally<350) {
	if(x>p+0.5*l) {
		if(p<800-l)
		{level.paddle.setPaddleX(30);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		else 
		{level.paddle.setAbsX(800-level.paddle.length);level.ball.setPaddleXInBall(level.paddle.paddlex);}
	}
	else if(x<p+0.5*l){
		if(p>0)
		{level.paddle.setPaddleX(-30);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		else
			{level.paddle.setAbsX(0);level.ball.setPaddleXInBall(level.paddle.paddlex);}
	}
	}
	else{
		if(x>p+l-50) {
			if(p<800-l)
			{level.paddle.setPaddleX(10);level.ball.setPaddleXInBall(level.paddle.paddlex);}
			else 
			{level.paddle.setAbsX(800-level.paddle.length);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		}
		else if(x<p+50){
			if(p>0)
			{level.paddle.setPaddleX(-10);level.ball.setPaddleXInBall(level.paddle.paddlex);}
			else
				{level.paddle.setAbsX(0);level.ball.setPaddleXInBall(level.paddle.paddlex);}
		}
	}
	level.ball.setPaddleXInBall(level.paddle.getPaddleX());
}
}



